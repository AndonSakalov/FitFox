// <auto-generated />
using System;
using FitFox.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitFox.Data.Migrations
{
    [DbContext(typeof(FitFoxDbContext))]
    [Migration("20250927101857_SeedAnswersForQuestionOne")]
    partial class SeedAnswersForQuestionOne
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FitFox.Data.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Identifier of the achievement.");

                    b.Property<int>("ConditionType")
                        .HasColumnType("int")
                        .HasComment("The condition for this achievement - LessonsLearned, MapsCovered, DailyQuestsCompleted, etc.");

                    b.Property<int>("ConditionValue")
                        .HasColumnType("int")
                        .HasComment("The value needed to get this achievement.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("What has been achieved in order to get this achievement.");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("The Url to the achievement's icon.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The title of the achievement.");

                    b.HasKey("Id");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("FitFox.Data.Models.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the answer.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The answer content.");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("995bd8c0-98e5-441b-96f2-046c4e732022"),
                            IsDeleted = false,
                            QuestionId = new Guid("65e73cd9-dec1-4e46-8342-69b204c6b226"),
                            Text = "Protein, Fats, Carbohydrates"
                        },
                        new
                        {
                            Id = new Guid("6f682b25-0953-45bc-b4aa-3f77c44f0abd"),
                            IsDeleted = false,
                            QuestionId = new Guid("65e73cd9-dec1-4e46-8342-69b204c6b226"),
                            Text = "Fiber, Antioxidants, Enzymes"
                        },
                        new
                        {
                            Id = new Guid("754eb19b-0e7b-4f1f-aa8b-214b0c9e4ca1"),
                            IsDeleted = false,
                            QuestionId = new Guid("65e73cd9-dec1-4e46-8342-69b204c6b226"),
                            Text = "Vitamin C, Vitamin D, Vitamin E"
                        });
                });

            modelBuilder.Entity("FitFox.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentXP")
                        .HasColumnType("int")
                        .HasComment("The current XP of the user. Overall XP, not of the current level.");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the level.");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FitFox.Data.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the lesson.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the map that this lesson belongs to.");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int")
                        .HasComment("The order of this lesson in the map.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The tile of the lesson.");

                    b.Property<int>("XP")
                        .HasColumnType("int")
                        .HasComment("The amount of XP this lesson grants the user on completion.");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26a98b9c-2a98-4714-8d28-99f6ed419834"),
                            IsDeleted = false,
                            MapId = new Guid("04493112-8b84-43be-b926-5a32c5524ac2"),
                            OrderNumber = 1,
                            Title = "Macronutrients",
                            XP = 100
                        });
                });

            modelBuilder.Entity("FitFox.Data.Models.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the level.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int")
                        .HasComment("The number representing the level. Incrementing by 1.");

                    b.Property<string>("LevelTitle")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The title granted for the level. Every 10 levels the user gets title of the level.");

                    b.Property<int>("RequiredXP")
                        .HasColumnType("int")
                        .HasComment("The XP that is required to get to this level.");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            IsDeleted = false,
                            LevelNumber = 1,
                            LevelTitle = "Newbie",
                            RequiredXP = 0
                        });
                });

            modelBuilder.Entity("FitFox.Data.Models.Map", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the map.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The description of the map.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MapCategory")
                        .HasColumnType("int")
                        .HasComment("The category of the map - training, nutrition, hydration, recovery, etc.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The display name of the map.");

                    b.HasKey("Id");

                    b.ToTable("Maps");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1afe12ea-606d-49d0-adb9-5f8311d86618"),
                            Description = "The basics of training with weights.",
                            IsDeleted = false,
                            MapCategory = 0,
                            Title = "Training"
                        },
                        new
                        {
                            Id = new Guid("04493112-8b84-43be-b926-5a32c5524ac2"),
                            Description = "The basics of nutrition focused on gym progression.",
                            IsDeleted = false,
                            MapCategory = 0,
                            Title = "Nutrition"
                        });
                });

            modelBuilder.Entity("FitFox.Data.Models.MappingModels.UserAchievement", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EarnedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("UsersAchievements");
                });

            modelBuilder.Entity("FitFox.Data.Models.MappingModels.UserLesson", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("UsersLessons");
                });

            modelBuilder.Entity("FitFox.Data.Models.MappingModels.UserMap", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("UsersMaps");
                });

            modelBuilder.Entity("FitFox.Data.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the question.");

                    b.Property<Guid?>("CorrectAnswerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the correct answer.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the lesson that this question belongs to.");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The question content.");

                    b.HasKey("Id");

                    b.HasIndex("CorrectAnswerId");

                    b.HasIndex("LessonId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65e73cd9-dec1-4e46-8342-69b204c6b226"),
                            IsDeleted = false,
                            LessonId = new Guid("26a98b9c-2a98-4714-8d28-99f6ed419834"),
                            Text = "Which are the 3 macronutrients?"
                        },
                        new
                        {
                            Id = new Guid("a8d6e1f2-5c33-4a0b-8cde-7e2f1a9b3d45"),
                            IsDeleted = false,
                            LessonId = new Guid("26a98b9c-2a98-4714-8d28-99f6ed419834"),
                            Text = "Which macronutrient regulates hormone production?"
                        },
                        new
                        {
                            Id = new Guid("c1f2b3e4-7d8a-4e5b-b2c3-9f0a1d2e3b56"),
                            IsDeleted = false,
                            LessonId = new Guid("26a98b9c-2a98-4714-8d28-99f6ed419834"),
                            Text = "Which macronutrient is the main source of energy for the body?"
                        },
                        new
                        {
                            Id = new Guid("d4e5f6a7-8b9c-4d0e-9f1a-2b3c4d5e6f78"),
                            IsDeleted = false,
                            LessonId = new Guid("26a98b9c-2a98-4714-8d28-99f6ed419834"),
                            Text = "Which nutrient is primarily used for muscle repair?"
                        },
                        new
                        {
                            Id = new Guid("83fc33fc-0db2-4695-a950-c494eb58a73c"),
                            IsDeleted = false,
                            LessonId = new Guid("26a98b9c-2a98-4714-8d28-99f6ed419834"),
                            Text = "How many calories does 1 gram of fat contain?"
                        },
                        new
                        {
                            Id = new Guid("e58fca52-c2da-44a4-b62f-9bd9bd7bb583"),
                            IsDeleted = false,
                            LessonId = new Guid("26a98b9c-2a98-4714-8d28-99f6ed419834"),
                            Text = "How many calories does 1 gram of carbohydrates contain?"
                        },
                        new
                        {
                            Id = new Guid("c46cf154-ee4c-4c5d-ac35-4b4cf69639ce"),
                            IsDeleted = false,
                            LessonId = new Guid("26a98b9c-2a98-4714-8d28-99f6ed419834"),
                            Text = "How many calories does 1 gram of protein contain?"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FitFox.Data.Models.Answer", b =>
                {
                    b.HasOne("FitFox.Data.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("FitFox.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("FitFox.Data.Models.Level", "Level")
                        .WithMany("Users")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("FitFox.Data.Models.Lesson", b =>
                {
                    b.HasOne("FitFox.Data.Models.Map", "Map")
                        .WithMany("Lessons")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("FitFox.Data.Models.MappingModels.UserAchievement", b =>
                {
                    b.HasOne("FitFox.Data.Models.Achievement", "Achievement")
                        .WithMany("AchievementUsers")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitFox.Data.Models.ApplicationUser", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitFox.Data.Models.MappingModels.UserLesson", b =>
                {
                    b.HasOne("FitFox.Data.Models.Lesson", "Lesson")
                        .WithMany("LessonUsers")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitFox.Data.Models.ApplicationUser", "User")
                        .WithMany("UserLessons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitFox.Data.Models.MappingModels.UserMap", b =>
                {
                    b.HasOne("FitFox.Data.Models.Map", "Map")
                        .WithMany("MapUsers")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitFox.Data.Models.ApplicationUser", "User")
                        .WithMany("UserMaps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitFox.Data.Models.Question", b =>
                {
                    b.HasOne("FitFox.Data.Models.Answer", "CorrectAnswer")
                        .WithMany()
                        .HasForeignKey("CorrectAnswerId");

                    b.HasOne("FitFox.Data.Models.Lesson", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CorrectAnswer");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FitFox.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FitFox.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitFox.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FitFox.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitFox.Data.Models.Achievement", b =>
                {
                    b.Navigation("AchievementUsers");
                });

            modelBuilder.Entity("FitFox.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserAchievements");

                    b.Navigation("UserLessons");

                    b.Navigation("UserMaps");
                });

            modelBuilder.Entity("FitFox.Data.Models.Lesson", b =>
                {
                    b.Navigation("LessonUsers");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("FitFox.Data.Models.Level", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FitFox.Data.Models.Map", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("MapUsers");
                });

            modelBuilder.Entity("FitFox.Data.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
